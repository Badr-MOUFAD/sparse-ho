
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_wlasso.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_wlasso.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_wlasso.py:


=====================================
Weighted Lasso with held-out test set
=====================================

This example shows how to perform hyperparameter optimization
for a weighted Lasso using a held-out validation set.
In particular we compare the weighted Lasso to LassoCV on a toy example

.. GENERATED FROM PYTHON SOURCE LINES 10-35

.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Kenan Sehic
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from numpy.linalg import norm
    from scipy.linalg import toeplitz

    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    from sklearn.utils import check_random_state
    from celer import Lasso, LassoCV

    from sparse_ho.models import WeightedLasso
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search
    from sparse_ho.optimizers import LineSearch









.. GENERATED FROM PYTHON SOURCE LINES 36-37

Dataset creation

.. GENERATED FROM PYTHON SOURCE LINES 37-53

.. code-block:: default

    n_samples = 900
    n_features = 600
    rng = check_random_state(0)
    X = rng.multivariate_normal(
        size=n_samples, mean=np.zeros(n_features),
        cov=toeplitz(0.5 ** np.arange(n_features)))


    # Create true regression coefficients of 5 non-zero values
    w_true = np.zeros(n_features)
    size_supp = 5
    idx = rng.choice(X.shape[1], size_supp, replace=False)
    w_true[idx] = (-1) ** np.arange(size_supp)
    noise = rng.randn(n_samples)
    y = X @ w_true
    y += noise / norm(noise) * 0.5 * norm(y)







.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default

    X, X_test, y, y_test = train_test_split(X, y, test_size=0.333, random_state=0)

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)







.. GENERATED FROM PYTHON SOURCE LINES 62-63

Max penalty value

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default

    alpha_max = np.max(np.abs(X[idx_train, :].T.dot(y[idx_train])))
    alpha_max /= len(idx_train)
    n_alphas = 30
    alphas = alpha_max * np.geomspace(1, 0.001, n_alphas)







.. GENERATED FROM PYTHON SOURCE LINES 70-71

Vanilla LassoCV

.. GENERATED FROM PYTHON SOURCE LINES 71-79

.. code-block:: default

    print("========== Celer's LassoCV started ===============")
    model_cv = LassoCV(
        verbose=False, fit_intercept=False, alphas=alphas, tol=1e-7, max_iter=100,
        cv=2, n_jobs=2).fit(X, y)

    # Measure mse on test
    mse_cv = mean_squared_error(y_test, model_cv.predict(X_test))
    print("Vanilla LassoCV: Mean-squared error on test data %f" % mse_cv)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========== Celer's LassoCV started ===============
    Vanilla LassoCV: Mean-squared error on test data 1.344718




.. GENERATED FROM PYTHON SOURCE LINES 83-85

Weighted Lasso with sparse-ho.
We use the vanilla lassoCV coefficients as a starting point

.. GENERATED FROM PYTHON SOURCE LINES 85-94

.. code-block:: default

    log_alpha0 = np.log(model_cv.alpha_) * np.ones(n_features)
    # Weighted Lasso: Sparse-ho: 1 param per feature
    estimator = Lasso(fit_intercept=False, max_iter=10, warm_start=True)
    model = WeightedLasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward()
    monitor = Monitor()
    optimizer = LineSearch(n_outer=20, tol=1e-6)
    grad_search(algo, criterion, model, optimizer, X, y, log_alpha0, monitor)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    !!step size rejected!! 1.9777483872441954 1.203449393643858

    (array([ -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
             0.10990135,  -2.27208323,  -2.27208323,  -2.12503212,
            -0.98209764,  -2.27208323,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -6.16926189,  -2.27208323,  -2.71026294,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -6.54136617,   0.10990135,
            -2.27208323,   0.10990135,   0.10990135,  -2.1771749 ,
            -2.27208323,  -0.33829894,  -1.30452196,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,   0.10990135,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -1.61592883,  -2.27208323,  -2.27208323,
            -0.3594796 ,  -0.05689299,  -2.27208323,  -2.27208323,
            -8.40988894,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -0.88258917,   0.10990135,  -1.2105344 ,
            -2.27208323,  -0.78466659,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -2.27208323,
            -0.12971944,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,   0.10990135,
            -2.27208323,  -2.27208323,  -2.27208323,  -0.15165027,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -5.09708344,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.00273022,  -2.27208323,  -2.27208323, -12.        ,
             0.10990135,   0.10990135,  -2.28864588,  -7.53963648,
            -1.83974258,  -0.21316378,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -1.55070919,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
             0.10990135,   0.10990135,  -2.27208323,  -2.27208323,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,   0.10990135,  -0.21502973,   0.10990135,
            -2.27208323,  -2.27208323,   0.10990135,  -2.27208323,
            -0.49954493,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -6.69682267,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -5.04349954,
             0.10990135,   0.10990135,  -6.35790877,  -2.27208323,
            -2.27208323,  -1.35273622,  -2.27208323,   0.10990135,
             0.10990135,  -2.27208323,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,   0.10990135,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -6.05614632,  -2.27208323,
            -3.11021226,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -0.78218379,  -2.27208323,  -2.27208323,   0.10990135,
            -2.27208323,  -2.27208323,  -6.15067787,  -0.87484925,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -1.31311902,
             0.10990135,  -0.04974997,   0.10990135, -10.30735094,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,   0.10990135,  -1.41512192,   0.10990135,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -1.39988361,
            -1.47710927,  -2.27208323,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -9.52736826,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -1.72091626,   0.10990135,  -2.27208323,
            -2.27208323,   0.10990135,  -2.27208323,  -6.13828985,
            -2.27208323,  -8.43671869,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -4.28922275,
            -2.27208323,  -2.27208323,  -5.18153066,  -2.27208323,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,   0.10990135,
             0.10990135,  -0.91612409,   0.10990135,  -2.27208323,
            -1.61771037,  -9.85401089,  -2.27208323,  -2.27208323,
            -2.27208323,  -1.70388131,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -1.71630871,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -0.51915412,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -0.66595659,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -0.96691571,   0.10990135,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.29792117,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -0.38069617,   0.10990135,  -2.27208323,
            -2.27208323,  -1.93711501,  -2.27208323,  -2.27208323,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -3.46978631,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -1.12170834,
            -2.27208323,  -2.27208323,  -0.30797662,  -2.27208323,
             0.10990135,  -2.27208323,   0.09361564,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -0.5081173 ,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -0.71844104,
            -2.27208323,  -2.27208323,  -2.27208323,  -1.65419101,
            -2.27208323,  -0.13741706,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323, -11.98842348,   0.10990135,
             0.10990135,  -2.27208323,   0.10990135,  -2.27208323,
            -1.24443545,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.34997385,  -5.32746447,  -2.27208323,
           -11.93782384,  -2.27208323,  -2.27208323, -10.05456242,
            -0.07883518,   0.10990135, -11.99307114,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -1.54806293,  -2.27208323,  -2.27208323,  -2.27208323,
             0.10990135,   0.10990135,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,   0.10990135,
             0.10990135,   0.10990135,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -0.61475136,   0.10990135,
            -2.27208323,  -2.27208323,  -1.2584189 ,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -1.65850129,  -0.59145557,   0.10990135,   0.10990135,
             0.10990135,   0.10990135,   0.10990135,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -1.19176908,  -2.27208323,
            -3.33696622,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,   0.10990135,   0.10990135,
            -2.27208323,  -2.27208323,  -2.27208323, -11.98580632,
             0.10990135,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -0.48200568,  -1.33134707,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
             0.10990135,  -2.27208323,  -1.48976424,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323, -10.23797249,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,   0.10990135,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
            -2.27208323,  -2.27208323,  -2.27208323,  -0.25156184,
            -2.27208323,  -2.27208323,  -2.27208323,  -2.27208323,
             0.10990135, -11.93210429,   0.10990135,  -2.27208323,
            -2.26577887,  -2.27208323,  -2.27208323,  -2.27208323]), 1.7488501046317515, array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -3.26386279e-04,  0.00000000e+00, -2.44280218e-03,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  3.21585514e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.88698102e-02,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -6.50601643e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -7.71800539e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.93692901e-07,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.47010475e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -3.94559520e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.07860856e-03,
            0.00000000e+00,  0.00000000e+00, -1.84092523e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.85289140e-04,  0.00000000e+00,
           -3.22680669e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.39309227e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.67804116e-06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -7.40284413e-03,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -9.56543502e-07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.73426874e-04,
            0.00000000e+00, -2.99502099e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.86581911e-04,
            0.00000000e+00,  0.00000000e+00, -7.59466543e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -3.98980253e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.45408536e-03,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -9.05090166e-07,  0.00000000e+00,
           -1.60623733e-02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -8.78400199e-04,  0.00000000e+00,
           -7.67509189e-07,  0.00000000e+00,  0.00000000e+00,  4.51180489e-06,
            0.00000000e+00,  0.00000000e+00, -1.98492686e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.06664758e-02,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.77194568e-02,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            4.14028260e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.22706585e-06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.71078017e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.42836741e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00]))



.. GENERATED FROM PYTHON SOURCE LINES 97-98

MSE on validation set

.. GENERATED FROM PYTHON SOURCE LINES 98-118

.. code-block:: default

    mse_sho_val = mean_squared_error(y[idx_val], estimator.predict(X[idx_val, :]))

    # MSE on test set, ie unseen data
    mse_sho_test = mean_squared_error(y_test, estimator.predict(X_test))


    print("Sparse-ho: Mean-squared error on validation data %f" % mse_sho_val)
    print("Sparse-ho: Mean-squared error on test (unseen) data %f" % mse_sho_test)


    labels = ['WeightedLasso val', 'WeightedLasso test', 'Lasso CV']

    df = pd.DataFrame(
        np.array([mse_sho_val, mse_sho_test, mse_cv]).reshape((1, -1)),
        columns=labels)
    df.plot.bar(rot=0)
    plt.xlabel("Estimator")
    plt.ylabel("Mean square error")
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_wlasso_001.png
    :alt: plot wlasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sparse-ho: Mean-squared error on validation data 1.748850
    Sparse-ho: Mean-squared error on test (unseen) data 2.207124





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.249 seconds)


.. _sphx_glr_download_auto_examples_plot_wlasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wlasso.py <plot_wlasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wlasso.ipynb <plot_wlasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
