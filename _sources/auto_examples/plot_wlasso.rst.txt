.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_wlasso.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_wlasso.py:


=====================================
Weighted Lasso with held-out test set
=====================================

This example shows how to perform hyperparameter optimization
for a weighted Lasso using a held-out validation set.
In particular we compare the weighted Lasso to LassoCV on a toy example


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Kenan Sehic
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from numpy.linalg import norm

    from celer import Lasso, LassoCV
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    from sklearn.utils import check_random_state
    from scipy.linalg import toeplitz

    from sparse_ho.models import WeightedLasso
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search








Dataset creation


.. code-block:: default

    n_samples = 900
    n_features = 600
    rng = check_random_state(0)
    X = rng.multivariate_normal(
        size=n_samples, mean=np.zeros(n_features),
        cov=toeplitz(0.5 ** np.arange(n_features)))


    # Create true regression coefficients of 5 non-zero values
    w_true = np.zeros(n_features)
    size_supp = 5
    idx = rng.choice(X.shape[1], size_supp, replace=False)
    w_true[idx] = (-1) ** np.arange(size_supp)
    noise = rng.randn(n_samples)
    y = X @ w_true
    y += noise / norm(noise) * 0.5 * norm(y)








.. code-block:: default

    X, X_test, y, y_test = train_test_split(X, y, test_size=0.333)

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)







Max penalty value


.. code-block:: default

    alpha_max = np.max(np.abs(X[idx_train, :].T.dot(y[idx_train]))) / len(idx_train)
    n_alphas = 30
    alphas = alpha_max * np.geomspace(1, 0.001, n_alphas)







Vanilla LassoCV


.. code-block:: default

    print("========== Celer's LassoCV started ===============")
    model_cv = LassoCV(
        verbose=False, fit_intercept=False, alphas=alphas, tol=1e-7, max_iter=100,
        cv=2, n_jobs=2).fit(X, y)

    # Measure mse on test
    mse_cv = mean_squared_error(y_test, model_cv.predict(X_test))
    print("Vanilla LassoCV: Mean-squared error on test data %f" % mse_cv)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========== Celer's LassoCV started ===============
    Vanilla LassoCV: Mean-squared error on test data 1.310611




Weighted Lasso with sparse-ho.
We use the vanilla lassoCV coefficients as a starting point


.. code-block:: default

    log_alpha0 = np.log(model_cv.alpha_) * np.ones(n_features)
    # Weighted Lasso: Sparse-ho: 1 param per feature
    estimator = Lasso(fit_intercept=False, max_iter=10, warm_start=True)
    model = WeightedLasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward()
    monitor = Monitor()
    grad_search(
        algo, criterion, model, X, y, log_alpha0, monitor, n_outer=20, tol=1e-6)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([ -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -1.87447445,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339, -11.99859984,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,   0.04878118,
             0.04878118,  -2.33320339,  -2.33320339,  -5.14921936,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -3.69408598,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -1.62522553,
             0.04878118,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -5.73057505,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -1.93716333,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -3.52696947,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.57983742, -12.        ,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -0.28074427,  -0.9384741 ,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339, -10.02630451,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -0.62676057,  -2.33320339,  -2.79707401,
            -2.33320339,  -2.33320339,  -2.33320339,  -0.15436674,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
           -12.        ,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -0.70286215,  -1.94792992,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -1.53474313,
            -1.1563273 ,  -0.43007088,  -2.33320339,  -2.33320339,
            -1.4503466 ,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -0.61343535,   0.04878118,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -8.07725261,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
             0.04878118,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -8.60305516,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,   0.04878118,
             0.04878118,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,  -2.33320339,  -2.37490233,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -1.59239812,
            -2.33320339,  -7.45940842,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -3.7948777 ,
            -2.33320339,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
             0.04878118,  -2.33320339,  -2.33320339,  -2.33320339,
            -1.92376047,  -2.33320339,  -2.33320339,  -2.33320339,
            -1.40983517,  -2.33320339,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.46097981,  -2.33320339,
            -2.33320339,  -0.88540564,  -8.57712169,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -9.0363748 ,  -1.6225413 ,
            -2.33320339,  -2.33320339,  -0.68105302,   0.04878118,
             0.04878118,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339, -11.30047247,  -2.33320339,
            -1.73018603,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -0.7803298 ,  -2.33320339,  -2.33320339,  -4.83566166,
            -2.33320339,  -2.33320339,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -1.78023503,  -2.33320339,
            -2.33320339,  -9.30403272,  -2.33320339,  -2.33320339,
            -2.33320339,  -0.41429226, -11.99585276,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
             0.04878118,  -2.33320339,  -2.33320339,   0.04878118,
           -10.07666501,  -1.39477129,  -2.33320339,  -2.33320339,
             0.04878118,  -2.33320339,   0.04878118,  -2.00511098,
            -2.33320339,  -2.33320339,  -7.55953729,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -1.71462268,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -2.33320339,
             0.04878118,   0.04878118,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -0.17384907,
            -1.84343721,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,   0.04878118,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339, -12.        ,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -1.04956578,  -2.33320339,
            -2.33320339,   0.04878118,   0.04878118,   0.04878118,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.02952787,
            -2.33320339,  -2.33320339,  -2.33320339,  -2.33320339,
            -2.33320339,  -2.33320339,  -2.33320339,  -0.31351305,
            -2.33320339,  -1.53167681,   0.04878118,   0.04878118,
            -2.33320339,  -2.33320339,  -1.97131653,  -2.33320339,
             0.04878118,  -2.33320339,   0.04878118,  -2.33320339,
            -2.33320339,  -2.33320339,   0.04878118,  -2.33320339]), 0.9887169857261934, array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -4.49900030e-07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.52839658e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -1.06291341e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.17490496e-04,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.11410407e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.86890192e-07,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -6.23282028e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -7.79918547e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            1.79593823e-06,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.86348244e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  1.77416916e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -5.51207805e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -9.18848237e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.75215084e-03,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.69913991e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -5.92780085e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.88723937e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.25536889e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  4.67136525e-07,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -7.07893165e-07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -3.72720502e-07,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -7.13298970e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.44332286e-07,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00]))



MSE on validation set


.. code-block:: default

    mse_sho_val = mean_squared_error(y[idx_val], estimator.predict(X[idx_val, :]))

    # MSE on test set, ie unseen data
    mse_sho_test = mean_squared_error(y_test, estimator.predict(X_test))


    print("Sparse-ho: Mean-squared error on validation data %f" % mse_sho_val)
    print("Sparse-ho: Mean-squared error on test (unseen) data %f" % mse_sho_test)


    labels = ['WeightedLasso val', 'WeightedLasso test', 'Lasso CV']

    df = pd.DataFrame(
        np.array([mse_sho_val, mse_sho_test, mse_cv]).reshape((1, -1)),
        columns=labels)
    df.plot.bar(rot=0)
    plt.xlabel("Estimator")
    plt.ylabel("Mean square error")
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_wlasso_001.png
    :alt: plot wlasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sparse-ho: Mean-squared error on validation data 0.988717
    Sparse-ho: Mean-squared error on test (unseen) data 1.474373





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.066 seconds)


.. _sphx_glr_download_auto_examples_plot_wlasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wlasso.py <plot_wlasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wlasso.ipynb <plot_wlasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
