.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_wlasso.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_wlasso.py:


=====================================
Weighted Lasso with held-out test set
=====================================

This example shows how to perform hyperparameter optimization
for a weighted Lasso using a held-out validation set.
In particular we compare the weighted Lasso to LassoCV on a toy example


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Kenan Sehic
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from numpy.linalg import norm

    from celer import Lasso, LassoCV
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    from sklearn.utils import check_random_state
    from scipy.linalg import toeplitz

    from sparse_ho.models import WeightedLasso
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search








Dataset creation


.. code-block:: default

    n_samples = 900
    n_features = 600
    rng = check_random_state(0)
    X = rng.multivariate_normal(
        size=n_samples, mean=np.zeros(n_features),
        cov=toeplitz(0.5 ** np.arange(n_features)))


    # Create true regression coefficients of 5 non-zero values
    w_true = np.zeros(n_features)
    size_supp = 5
    idx = rng.choice(X.shape[1], size_supp, replace=False)
    w_true[idx] = (-1) ** np.arange(size_supp)
    noise = rng.randn(n_samples)
    y = X @ w_true
    y += noise / norm(noise) * 0.5 * norm(y)








.. code-block:: default

    X, X_test, y, y_test = train_test_split(X, y, test_size=0.333)

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)







Max penalty value


.. code-block:: default

    alpha_max = np.max(np.abs(X[idx_train, :].T.dot(y[idx_train]))) / len(idx_train)
    n_alphas = 30
    alphas = alpha_max * np.geomspace(1, 0.001, n_alphas)







Vanilla LassoCV


.. code-block:: default

    print("========== Celer's LassoCV started ===============")
    model_cv = LassoCV(
        verbose=False, fit_intercept=False, alphas=alphas, tol=1e-7, max_iter=100,
        cv=2, n_jobs=2).fit(X, y)

    # Measure mse on test
    mse_cv = mean_squared_error(y_test, model_cv.predict(X_test))
    print("Vanilla LassoCV: Mean-squared error on test data %f" % mse_cv)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========== Celer's LassoCV started ===============
    Vanilla LassoCV: Mean-squared error on test data 1.318579




Weighted Lasso with sparse-ho.
We use the vanilla lassoCV coefficients as a starting point


.. code-block:: default

    log_alpha0 = np.log(model_cv.alpha_) * np.ones(n_features)
    # Weighted Lasso: Sparse-ho: 1 param per feature
    estimator = Lasso(fit_intercept=False, max_iter=10, warm_start=True)
    model = WeightedLasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward()
    monitor = Monitor()
    grad_search(
        algo, criterion, model, X, y, log_alpha0, monitor, n_outer=20, tol=1e-6)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    !!step size rejected!! 1.93687353102483 1.285428493736309

    (array([ -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -1.85322681,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07671335,
            -2.07966625,   0.06411987,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -3.08602151,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,   0.06411987,   0.06411987,  -2.07966625,
            -6.54169715,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -1.8191893 ,  -2.07966625,
             0.06411987,   0.06411987,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -2.07966625,  -2.07966625,  -0.77540115,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987,  -1.34007348,
            -0.06104838,  -2.07966625,  -2.07966625,  -7.74825585,
            -2.07966625,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987, -11.9989002 ,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -0.58665035,  -2.07966625,  -2.07966625,   0.06411987,
            -0.85136804,  -2.07966625,  -2.07966625,  -2.07966625,
            -1.67887673,  -5.57726847,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -5.49201519,  -2.59688234,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,   0.06411987,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987, -11.45245704,
             0.06411987,   0.06411987,  -0.64041057,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -0.59079434,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -1.01842215,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -1.29439738,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987,   0.06411987,
            -1.0963448 ,  -2.07966625,  -2.07966625,  -6.28430617,
            -2.07966625,   0.06411987,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -6.86050512,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -0.39868123,
            -9.00398942,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -5.44557724,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -3.95829389,  -2.07966625,  -2.07966625,
             0.06411987,  -1.05435383,  -0.66491006,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -1.38669527,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -4.98862276,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -1.39073348,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -1.55604474,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,   0.06411987,  -3.50533538,  -0.6853191 ,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,   0.06411987,  -2.07966625,   0.06411987,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -2.07966625,  -0.26529688,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -1.72717698,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,   0.06411987,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -9.97120848,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,   0.06411987, -12.        ,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -7.28183173,  -2.07966625,  -7.69977939,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -4.64612002,
            -2.07966625,  -1.03518969,  -2.07966625,  -2.07966625,
            -2.07966625,   0.06411987,  -9.01773695,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -6.78412491,  -2.07966625,  -2.07966625,   0.04579311,
            -1.16712916,  -0.58716763,  -2.07966625,  -1.88646723,
            -2.07966625,  -6.08901274,  -2.07966625,  -2.07966625,
            -1.3168971 ,  -1.19178489,  -0.19389049,   0.06411987,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -0.1864339 ,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -0.65771354,  -2.07966625,   0.06411987,
            -2.07966625,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,  -2.07966625,  -1.44079253,  -1.64006203,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -1.27480543,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987, -11.99873029,
            -2.07966625,   0.06411987,   0.06411987,  -2.07966625,
            -2.07966625,   0.06411987,  -2.07966625,  -2.07966625,
             0.06411987,  -2.07966625,  -9.48906244,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -1.51169011,  -2.07966625,  -6.00816156,  -2.07966625,
             0.06411987,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -8.07916205,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,   0.06411987,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -2.02329791,
            -2.07966625,  -0.51636271,  -2.07966625,  -2.07966625,
            -2.07966625,  -8.08175226,  -2.07966625,  -2.07966625,
            -2.07966625,  -2.07966625,  -2.07966625,  -3.58828241]), 1.7256647311776971, array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  8.64931017e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -7.70955539e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            5.01274804e-06,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.06680096e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.88685176e-07,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -2.36151792e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -4.02463189e-04, -5.67383809e-03,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.23787044e-06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.63289918e-05,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -6.58577807e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -2.13866786e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.11497164e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.45676730e-03,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -9.56149990e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.59642621e-02,  5.68367649e-03,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  2.88212621e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  8.03617044e-07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -1.01069840e-04,  0.00000000e+00, -3.71709748e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -7.49772792e-04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.56698851e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            1.53452070e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -3.63148680e-04,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.09564960e-06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  8.42151099e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -3.25612451e-04,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  1.45777077e-07,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -4.85593895e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.30002009e-04]))



MSE on validation set


.. code-block:: default

    mse_sho_val = mean_squared_error(y[idx_val], estimator.predict(X[idx_val, :]))

    # MSE on test set, ie unseen data
    mse_sho_test = mean_squared_error(y_test, estimator.predict(X_test))


    print("Sparse-ho: Mean-squared error on validation data %f" % mse_sho_val)
    print("Sparse-ho: Mean-squared error on test (unseen) data %f" % mse_sho_test)


    labels = ['WeightedLasso val', 'WeightedLasso test', 'Lasso CV']

    df = pd.DataFrame(
        np.array([mse_sho_val, mse_sho_test, mse_cv]).reshape((1, -1)),
        columns=labels)
    df.plot.bar(rot=0)
    plt.xlabel("Estimator")
    plt.ylabel("Mean square error")
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_wlasso_001.png
    :alt: plot wlasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sparse-ho: Mean-squared error on validation data 1.725665
    Sparse-ho: Mean-squared error on test (unseen) data 2.362483





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.874 seconds)


.. _sphx_glr_download_auto_examples_plot_wlasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wlasso.py <plot_wlasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wlasso.ipynb <plot_wlasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
