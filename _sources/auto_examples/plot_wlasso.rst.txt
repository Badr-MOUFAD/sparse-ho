.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_wlasso.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_wlasso.py:


=====================================
Weighted Lasso with held-out test set
=====================================

This example shows how to perform hyperparameter optimization
for a weighted Lasso using a held-out validation set.
In particular we compare the weighted Lasso to LassoCV on a toy example


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Kenan Sehic
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from numpy.linalg import norm

    from celer import Lasso, LassoCV
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    from sklearn.utils import check_random_state
    from scipy.linalg import toeplitz

    from sparse_ho.models import WeightedLasso
    from sparse_ho.criterion import CV
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search








Dataset creation


.. code-block:: default

    n_samples = 600
    n_features = 600
    rng = check_random_state(0)
    X = rng.multivariate_normal(
        size=n_samples, mean=np.zeros(n_features),
        cov=toeplitz(0.5 ** np.arange(n_features)))


    # Create true regression coefficients of 5 non-zero values
    w_true = np.zeros(n_features)
    size_supp = 5
    idx = rng.choice(X.shape[0], size_supp, replace=False)
    w_true[idx] = (-1) ** np.arange(size_supp)
    noise = rng.randn(n_samples)
    y = X @ w_true
    y += noise / norm(noise) * 0.5 * norm(y)







Here we split the dataset (X, y) in 3:
the regression coefficients will be determined using X_train, y_train
the regularization parameter will be calibrated using X_val, y_val
the model is then tested on unseen data X_test, y_test


.. code-block:: default

    X_train_val, X_test, y_train_val, y_test = train_test_split(
        X, y, test_size=0.3, random_state=2)
    X_train, X_val, y_train, y_val = train_test_split(
        X_train_val, y_train_val, test_size=0.5, random_state=2)







Max penalty value


.. code-block:: default

    alpha_max = np.max(np.abs(X_train.T.dot(y_train))) / X_train.shape[0]
    n_alphas = 30
    alphas = alpha_max * np.geomspace(1, 0.001, n_alphas)







Vanilla LassoCV


.. code-block:: default

    print("========== Celer's LassoCV started ===============")
    model_cv = LassoCV(
        verbose=False, fit_intercept=False, alphas=alphas, tol=1e-7, max_iter=100,
        cv=2, n_jobs=2).fit(X_train_val, y_train_val)

    # Measure mse on test
    mse_cv = mean_squared_error(y_test, model_cv.predict(X_test))
    print("Vanilla LassoCV: Mean-squared error on test data %f" % mse_cv)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========== Celer's LassoCV started ===============
    Vanilla LassoCV: Mean-squared error on test data 1.256642




Weighted Lasso with sparse-ho.
We use the vanilla lassoCV coefficients as a starting point


.. code-block:: default

    alpha0 = np.log(model_cv.alpha_) * np.ones(X_train.shape[1])
    # Weighted Lasso: Sparse-ho: 1 param per feature
    estimator = Lasso(fit_intercept=False, max_iter=10, warm_start=True)
    model = WeightedLasso(X_train, y_train, estimator=estimator)
    criterion = CV(X_val, y_val, model, X_test=X_test, y_test=y_test)
    algo = ImplicitForward()
    monitor = Monitor()
    grad_search(
        algo, criterion, alpha0, monitor, n_outer=20, tol=1e-6)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([ -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -0.2024833 ,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
             0.11151323,   0.11151323,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,   0.11151323, -12.        ,  -0.82289153,
            -0.71665707,  -1.97421325,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,   0.11151323,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,   0.11151323,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,   0.11151323,  -7.83045733,
            -2.03227289,  -5.32315778,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -4.5863289 ,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,   0.11151323,  -2.03227289,  -2.03227289,
            -4.71451565,  -1.14555602,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,   0.11151323,   0.11151323,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -1.95763425,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -4.976862  ,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.13012012,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,   0.11151323,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -0.59957442,
            -2.03227289, -11.87749458,  -6.29341596,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -0.4592734 ,   0.11151323,
             0.11151323,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289, -12.        ,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289, -11.9998313 ,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -0.65926919,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.92149366,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -0.73111824,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,   0.11151323,  -2.03227289,
            -2.03227289,  -2.03227289,  -3.64883903,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,   0.11151323,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.01581535,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -1.37007351,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -6.37207281,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -0.2290245 ,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -0.35288573,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,   0.11151323,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
             0.11151323,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289,  -2.03227289,  -2.03227289,  -2.03227289,
            -2.03227289, -12.        ,  -2.03227289,  -2.03227289]), 1.0765322243843984, array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.39593166e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.23906621e-05,
            0.00000000e+00, -6.75960016e-05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -1.28800761e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -8.72431477e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
           -1.65983931e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.41344522e-03,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -8.61046241e-08, -4.86676602e-05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.53207833e-02,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  1.36110837e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -3.23768542e-07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.00543423e-03,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  4.12498730e-03,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            3.25106724e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  9.30144806e-08,  0.00000000e+00,  0.00000000e+00]))



MSE on validation set


.. code-block:: default

    mse_sho_val = mean_squared_error(y_val, estimator.predict(X_val))

    # MSE on test set, ie unseen data
    mse_sho_test = mean_squared_error(y_test, estimator.predict(X_test))


    print("Sparse-ho: Mean-squared error on validation data %f" % mse_sho_val)
    print("Sparse-ho: Mean-squared error on test (unseen) data %f" % mse_sho_test)


    labels = ['wLasso val', 'wLasso test', 'Lasso CV']

    df = pd.DataFrame(
        np.array([mse_sho_val, mse_sho_test, mse_cv]).reshape((1, -1)),
        columns=labels)
    df.plot.bar(rot=0)
    plt.xlabel("Estimator")
    plt.ylabel("Mean square error")
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_wlasso_001.png
    :alt: plot wlasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sparse-ho: Mean-squared error on validation data 1.076532
    Sparse-ho: Mean-squared error on test (unseen) data 1.142013





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.910 seconds)


.. _sphx_glr_download_auto_examples_plot_wlasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wlasso.py <plot_wlasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wlasso.ipynb <plot_wlasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
