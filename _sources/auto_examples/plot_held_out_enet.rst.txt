.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_held_out_enet.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_held_out_enet.py:


============================
Lasso with held-out test set
============================

This example shows how to perform hyperparameter optimization
for an elastic-net using a held-out validation set.


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #
    # License: BSD (3-clause)

    import time
    import numpy as np
    from sklearn import linear_model
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D

    from libsvmdata.datasets import fetch_libsvm

    from sklearn.datasets import make_regression
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho.models import ElasticNet
    from sparse_ho.ho import grad_search
    from sparse_ho.utils import Monitor

    Axes3D  # hack for matplotlib 3D support
    # TODO improve example and remove this 3D graph

    # dataset = "rcv1"
    dataset = 'simu'
    # use_small_part = False
    use_small_part = True








Load some data


.. code-block:: default


    print("Started to load data")
    dataset = 'rcv1'
    # dataset = 'simu'

    if dataset == 'rcv1':
        X, y = fetch_libsvm('rcv1_train')
    else:
        X, y = make_regression(n_samples=1000, n_features=1000, noise=40)

    print("Finished loading data")

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)

    print("Starting path computation...")
    n_samples = len(y[idx_train])
    alpha_max = np.max(np.abs(X[idx_train, :].T.dot(y[idx_train]))) / len(idx_train)
    log_alpha_max = np.log(alpha_max)

    alpha_min = 1e-4 * alpha_max

    n_grid = 10
    alphas_1 = np.geomspace(0.6 * alpha_max, alpha_min, n_grid)
    log_alphas_1 = np.log(alphas_1)
    alphas_2 = np.geomspace(0.6 * alpha_max, alpha_min, n_grid)
    log_alphas_2 = np.log(alphas_2)

    results = np.zeros((n_grid, n_grid))
    tol = 1e-4
    max_iter = 50000

    estimator = linear_model.ElasticNet(
        fit_intercept=False, tol=tol, max_iter=max_iter, warm_start=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Started to load data
    Dataset: rcv1_train
    Finished loading data
    Starting path computation...




Grid-search with scikit-learn
-----------------------------


.. code-block:: default


    print("Started grid-search")
    t_grid_search = - time.time()
    for i in range(n_grid):
        print("lambda %i / %i" % (i, n_grid))
        for j in range(n_grid):
            print("lambda %i / %i" % (j, n_grid))
            estimator.alpha = (alphas_1[i] + alphas_2[j])
            estimator.l1_ratio = alphas_1[i] / (alphas_1[i] + alphas_2[j])
            estimator.fit(X[idx_train, :], y[idx_train])
            results[i, j] = np.mean((y[idx_val] - X[idx_val, :] @ estimator.coef_) ** 2)
    t_grid_search += time.time()
    print("Finished grid-search")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Started grid-search
    lambda 0 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 1 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 2 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 3 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 4 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 5 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 6 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 7 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 8 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    lambda 9 / 10
    lambda 0 / 10
    lambda 1 / 10
    lambda 2 / 10
    lambda 3 / 10
    lambda 4 / 10
    lambda 5 / 10
    lambda 6 / 10
    lambda 7 / 10
    lambda 8 / 10
    lambda 9 / 10
    Finished grid-search




Grad-search with sparse-ho
--------------------------


.. code-block:: default

    estimator = linear_model.ElasticNet(
        fit_intercept=False, max_iter=max_iter, warm_start=True)
    print("Started grad-search")
    t_grad_search = - time.time()
    monitor = Monitor()
    n_outer = 10
    model = ElasticNet(max_iter=max_iter, estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward(tol_jac=1e-7, n_iter_jac=1000, max_iter=max_iter)
    grad_search(
        algo, criterion, model, X, y, verbose=True,
        log_alpha0=np.array([np.log(alpha_max * 0.3), np.log(alpha_max / 10)]),
        tol=tol, n_outer=n_outer, monitor=monitor)
    t_grad_search += time.time()
    alphas_grad = np.exp(np.array(monitor.log_alphas))
    alphas_grad /= alpha_max


    print("Time grid-search %f" % t_grid_search)
    print("Time grad-search %f" % t_grad_search)
    print("Minimum grid search %0.3e" % results.min())
    print("Minimum grad search %0.3e" % np.array(monitor.objs).min())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Started grad-search
    grad lambda [0.21482443 0.04189048]
    value of lambda_k [-8.30197129 -7.16578814]
    grad lambda [0.06233496 0.0622351 ]
    value of lambda_k [-9.14991226 -8.01237068]
    grad lambda [0.03378978 0.0288922 ]
    value of lambda_k [-9.63374542 -8.42607582]
    grad lambda [0.02421421 0.0203478 ]
    value of lambda_k [-9.99871532 -8.73276901]
    grad lambda [0.0175788  0.01554407]
    value of lambda_k [-10.27761774  -8.97938872]
    grad lambda [0.01352691 0.01206075]
    value of lambda_k [-10.50352919  -9.18081391]
    grad lambda [0.01065587 0.00950575]
    value of lambda_k [-10.69085813  -9.34792376]
    grad lambda [0.00828327 0.00733894]
    value of lambda_k [-10.84414112  -9.48373193]
    grad lambda [0.00709898 0.00557686]
    value of lambda_k [-10.98242273  -9.59236402]
    grad lambda [0.00568092 0.00429159]
    value of lambda_k [-11.09890595  -9.68036002]
    Time grid-search 100.870829
    Time grad-search 87.937872
    Minimum grid search 2.050e-01
    Minimum grad search 2.085e-01




Plot results
------------


.. code-block:: default


    idx = np.where(results == results.min())

    a, b = np.meshgrid(alphas_1 / alpha_max, alphas_2 / alpha_max)
    fig = plt.figure()
    ax = plt.axes(projection='3d')
    ax.plot_surface(
        np.log(a), np.log(b), results, rstride=1, cstride=1,
        cmap='viridis', edgecolor='none', alpha=0.5)
    ax.scatter3D(
        np.log(a), np.log(b), results,
        monitor.objs, c="black", s=20, marker="o")
    ax.scatter3D(
        np.log(alphas_grad[:, 0]), np.log(alphas_grad[:, 1]),
        monitor.objs, c="red", s=200, marker="X")
    ax.scatter3D(
        np.log(alphas_2[idx[1]] / alpha_max),
        np.log(alphas_1[idx[0]] / alpha_max),
        [results.min()], c="black", s=200, marker="X")
    ax.set_xlabel("lambda1")
    ax.set_ylabel("lambda2")
    ax.set_label("Loss on validation set")
    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_held_out_enet_001.png
    :alt: plot held out enet
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  9.049 seconds)


.. _sphx_glr_download_auto_examples_plot_held_out_enet.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_held_out_enet.py <plot_held_out_enet.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_held_out_enet.ipynb <plot_held_out_enet.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
