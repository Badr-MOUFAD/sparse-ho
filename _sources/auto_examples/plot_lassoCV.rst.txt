
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_lassoCV.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_lassoCV.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_lassoCV.py:


=============================
Lasso with Cross-validation
=============================

This example shows how to perform hyperparameter optimization
for a Lasso using a full cross-validation score.

.. GENERATED FROM PYTHON SOURCE LINES 9-57

.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Mathurin Massias

    # License: BSD (3-clause)

    import time
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import sklearn

    from libsvmdata import fetch_libsvm
    from sklearn.datasets import make_regression
    from sklearn.linear_model import LassoCV
    from sklearn.model_selection import KFold

    from sparse_ho import ImplicitForward, grad_search
    from sparse_ho.models import Lasso
    from sparse_ho.criterion import HeldOutMSE, CrossVal
    from sparse_ho.optimizers import GradientDescent
    from sparse_ho.utils import Monitor
    from sparse_ho.utils_plot import discrete_cmap

    print(__doc__)

    # dataset = 'rcv1'
    dataset = 'simu'

    if dataset == 'rcv1':
        X, y = fetch_libsvm('rcv1_train')
    else:
        X, y = make_regression(
            n_samples=500, n_features=1000, noise=40,
            random_state=42)

    kf = KFold(n_splits=5, shuffle=True, random_state=42)

    print("Starting path computation...")
    n_samples = len(y)
    alpha_max = np.max(np.abs(X.T.dot(y))) / n_samples

    n_alphas = 10
    alphas = np.geomspace(alpha_max, alpha_max / 1_000, n_alphas)

    tol = 1e-8





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Starting path computation...




.. GENERATED FROM PYTHON SOURCE LINES 58-60

Cross-validation with scikit-learn
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-71

.. code-block:: default

    print('scikit started')

    t0 = time.time()
    reg = LassoCV(
        cv=kf, verbose=True, tol=tol, fit_intercept=False,
        alphas=alphas, max_iter=1e5).fit(X, y)
    reg.score(X, y)
    t_sk = time.time() - t0

    print('scikit finished')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scikit started
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    ..................................................[Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:   13.3s finished
    scikit finished




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Now do the hyperparameter optimization with implicit differentiation
--------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 74-96

.. code-block:: default


    estimator = sklearn.linear_model.Lasso(fit_intercept=False,
                                           warm_start=True, max_iter=1e5)

    print('sparse-ho started')

    t0 = time.time()
    model = Lasso(estimator)
    criterion = HeldOutMSE(None, None)
    alpha0 = 0.9 * alpha_max
    monitor_grad = Monitor()
    cross_val_criterion = CrossVal(criterion, cv=kf)
    algo = ImplicitForward()
    optimizer = GradientDescent(n_outer=10, tol=tol)
    grad_search(
        algo, cross_val_criterion, model, optimizer, X, y, alpha0,
        monitor_grad)

    t_grad_search = time.time() - t0

    print('sparse-ho finished')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparse-ho started
    sparse-ho finished




.. GENERATED FROM PYTHON SOURCE LINES 97-99

Plot results
------------

.. GENERATED FROM PYTHON SOURCE LINES 99-131

.. code-block:: default

    objs = reg.mse_path_.mean(axis=1)

    p_alphas_grad = np.array(monitor_grad.alphas) / alpha_max
    objs_grad = np.array(monitor_grad.objs)


    print(f"Time for grid search: {t_sk:.2f} s")
    print(f"Time for grad search (sparse-ho): {t_grad_search:.2f} s")

    print(f'Minimum outer criterion value with grid search: {objs.min():.5f}')
    print(f'Minimum outer criterion value with grad search: {objs_grad.min():.5f}')

    current_palette = sns.color_palette("colorblind")
    cmap = discrete_cmap(len(objs_grad), 'Greens')

    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(alphas / alphas[0], objs, color=current_palette[0])
    ax.plot(
        alphas / alphas[0], objs,
        'bo', label='0-th order method (grid search)',
        color=current_palette[1])
    ax.scatter(
        p_alphas_grad, objs_grad,
        label='1-st order method',  marker='X',
        color=cmap(np.linspace(0, 1, len(objs_grad))), s=40, zorder=40)
    plt.xlabel(r"$\lambda / \lambda_{\max}$")
    plt.ylabel("Cross-validation loss")
    ax.set_xscale("log")
    plt.tick_params(width=5)
    plt.legend()
    plt.tight_layout()
    plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_lassoCV_001.png
    :alt: plot lassoCV
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time for grid search: 13.30 s
    Time for grad search (sparse-ho): 3.18 s
    Minimum outer criterion value with grid search: 1938.13556
    Minimum outer criterion value with grad search: 1937.83528
    /home/circleci/project/examples/plot_lassoCV.py:116: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string "bo" (-> color='b'). The keyword argument will take precedence.
      ax.plot(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.884 seconds)


.. _sphx_glr_download_auto_examples_plot_lassoCV.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_lassoCV.py <plot_lassoCV.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_lassoCV.ipynb <plot_lassoCV.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
