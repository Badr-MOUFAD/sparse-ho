.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_held_out_lasso.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_held_out_lasso.py:


============================
Lasso with held-out test set
============================

This example shows how to perform hyperparameter optimisation
for a Lasso using a held-out test set.


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #
    # License: BSD (3-clause)

    import time
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns

    from sparse_ho.models import Lasso
    from sparse_ho.criterion import CV
    from sparse_ho.forward import Forward
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search
    from sparse_ho.grid_search import grid_search
    from sklearn.datasets import make_regression

    from sklearn.model_selection import train_test_split


    from sparse_ho.datasets.real import get_rcv1

    print(__doc__)

    # dataset = 'rcv1'
    dataset = 'simu'

    if dataset == 'rcv1':
        X_train, X_val, X_test, y_train, y_val, y_test = get_rcv1()
    else:
        X, y = make_regression(n_samples=1000, n_features=1000, noise=40)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
        X_train, X_val, y_train, y_val = train_test_split(
            X_train, y_train, test_size=0.5)

    n_samples, n_features = X_train.shape

    print("Starting path computation...")
    n_samples = len(y_train)
    alpha_max = np.max(np.abs(X_train.T.dot(y_train))) / X_train.shape[0]
    log_alpha0 = np.log(alpha_max / 10)

    n_alphas = 10
    p_alphas = np.geomspace(1, 0.0001, n_alphas)
    alphas = alpha_max * p_alphas
    log_alphas = np.log(alphas)

    tol = 1e-7
    max_iter = 1e5





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Starting path computation...




Grid-search
-----------


.. code-block:: default

    print('scikit started')

    t0 = time.time()
    model = Lasso(
        X_train, y_train, np.log(alpha_max / 10), max_iter=max_iter)
    criterion = CV(X_val, y_val, model, X_test=X_test, y_test=y_test)
    algo = Forward(criterion, use_sk=True)
    monitor_grid_sk = Monitor()
    grid_search(
        algo, None, None, monitor_grid_sk, log_alphas=log_alphas,
        tol=tol)
    objs = np.array(monitor_grid_sk.objs)
    t_sk = time.time() - t0

    print('scikit finished')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scikit started
    scikit finished




Grad-search
-----------


.. code-block:: default

    print('sparse-ho started')

    t0 = time.time()
    model = Lasso(
        X_train, y_train, np.log(alpha_max / 10), max_iter=max_iter)
    criterion = CV(X_val, y_val, model, X_test=X_test, y_test=y_test)
    algo = ImplicitForward(criterion, use_sk=True)
    monitor_grad = Monitor()
    grad_search(
        algo, np.log(alpha_max / 10), monitor_grad, n_outer=10, tol=tol)

    t_grad_search = time.time() - t0






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparse-ho started




Plot results
------------


.. code-block:: default

    p_alphas_grad = np.exp(np.array(monitor_grad.log_alphas)) / alpha_max

    objs_grad = np.array(monitor_grad.objs)

    print('sparse-ho finished')
    print("Time to compute CV for scikit-learn: %.2f" % t_sk)
    print("Time to compute CV for sparse-ho: %.2f" % t_grad_search)

    print('Minimum objective grid-search %.5f' % objs.min())
    print('Minimum objective grad-search %.5f' % objs_grad.min())


    current_palette = sns.color_palette("colorblind")

    fig = plt.figure(figsize=(5, 3))
    plt.semilogx(
        p_alphas, objs, color=current_palette[0])
    plt.semilogx(
        p_alphas, objs, 'bo', label='0-order method (grid-search)',
        color=current_palette[1])
    plt.semilogx(
        p_alphas_grad, objs_grad, 'bX', label='1-st order method',
        color=current_palette[2])
    plt.xlabel(r"$\lambda / \lambda_{\max}$")
    plt.ylabel(
        r"$\|y^{\rm{val}} - X^{\rm{val}} \hat \beta^{(\lambda)} \|^2$")
    plt.tick_params(width=5)
    plt.legend()
    plt.tight_layout()
    plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_held_out_lasso_001.png
    :alt: plot held out lasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparse-ho finished
    Time to compute CV for scikit-learn: 2.13
    Time to compute CV for sparse-ho: 0.08
    Minimum objective grid-search 1736.76656
    Minimum objective grad-search 1637.82150
    /home/qbe/sparse-ho/examples/plot_held_out_lasso.py:132: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show(block=False)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.445 seconds)


.. _sphx_glr_download_auto_examples_plot_held_out_lasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_held_out_lasso.py <plot_held_out_lasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_held_out_lasso.ipynb <plot_held_out_lasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
