.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_held_out_lasso.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_held_out_lasso.py:


============================
Lasso with held-out test set
============================

This example shows how to perform hyperparameter optimization
for a Lasso using a held-out validation set.


.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #
    # License: BSD (3-clause)

    import time
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from sklearn import linear_model

    from sparse_ho.models import Lasso
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho.forward import Forward
    from sparse_ho.implicit_forward import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search
    from sparse_ho.grid_search import grid_search
    from sklearn.datasets import make_regression

    from libsvmdata.datasets import fetch_libsvm


    print(__doc__)

    dataset = 'rcv1'
    # dataset = 'simu'

    if dataset == 'rcv1':
        X, y = fetch_libsvm('rcv1_train')
    else:
        X, y = make_regression(n_samples=1000, n_features=1000, noise=40)

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)

    print("Starting path computation...")
    n_samples = len(y[idx_train])
    alpha_max = np.max(np.abs(X[idx_train, :].T.dot(y[idx_train]))) / len(idx_train)
    log_alpha0 = np.log(alpha_max / 10)

    n_alphas = 10
    p_alphas = np.geomspace(1, 0.0001, n_alphas)
    alphas = alpha_max * p_alphas
    log_alphas = np.log(alphas)

    tol = 1e-7
    max_iter = 1e5





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    could import smt.sampling_methods

    Dataset: rcv1_train
    Downloading data from https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/rcv1_train.binary.bz2 (13.1 MB)

    file_sizes:   0%|                                   | 0.00/13.7M [00:00<?, ?B/s]    file_sizes:   0%|                           | 24.6k/13.7M [00:00<02:01, 113kB/s]    file_sizes:   0%|                           | 49.2k/13.7M [00:00<02:01, 113kB/s]    file_sizes:   1%|2                           | 106k/13.7M [00:00<01:40, 136kB/s]    file_sizes:   2%|4                           | 221k/13.7M [00:00<01:17, 175kB/s]    file_sizes:   3%|9                           | 451k/13.7M [00:01<00:56, 233kB/s]    file_sizes:   7%|#8                          | 909k/13.7M [00:01<00:40, 318kB/s]    file_sizes:  13%|###5                       | 1.83M/13.7M [00:01<00:27, 440kB/s]    file_sizes:  27%|#######2                   | 3.66M/13.7M [00:01<00:16, 615kB/s]    file_sizes:  38%|##########2                | 5.23M/13.7M [00:01<00:10, 847kB/s]    file_sizes:  50%|############8             | 6.81M/13.7M [00:02<00:06, 1.15MB/s]    file_sizes:  61%|###############8          | 8.38M/13.7M [00:02<00:03, 1.54MB/s]    file_sizes:  72%|##################8       | 9.95M/13.7M [00:02<00:01, 2.01MB/s]    file_sizes:  84%|#####################8    | 11.5M/13.7M [00:02<00:00, 2.57MB/s]    file_sizes:  95%|########################8 | 13.1M/13.7M [00:03<00:00, 3.18MB/s]    file_sizes: 100%|##########################| 13.7M/13.7M [00:03<00:00, 4.47MB/s]
    Successfully downloaded file to /home/circleci/data/libsvm/binary/rcv1_train.binary.bz2
    Decompressing...
    Loading svmlight file...
    Starting path computation...




Grid-search with scikit-learn
-----------------------------


.. code-block:: default


    estimator = linear_model.Lasso(
        fit_intercept=False, max_iter=1000, warm_start=True)

    print('scikit-learn started')

    t0 = time.time()
    model = Lasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = Forward()
    monitor_grid_sk = Monitor()
    grid_search(
        algo, criterion, model, X, y, None, None, monitor_grid_sk, log_alphas=log_alphas, tol=tol)
    objs = np.array(monitor_grid_sk.objs)
    t_sk = time.time() - t0

    print('scikit-learn finished')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scikit-learn started
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.06099701478785846, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 2.0066418148676917, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.17218713503172, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 8.79327661352437, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    scikit-learn finished




Grad-search with sparse-ho
--------------------------


.. code-block:: default


    print('sparse-ho started')

    t0 = time.time()
    model = Lasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward(criterion)
    monitor_grad = Monitor()
    grad_search(
        algo, criterion, model, X, y, np.log(alpha_max / 10), monitor_grad,
        n_outer=10, tol=tol)

    t_grad_search = time.time() - t0

    print('sparse-ho finished')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparse-ho started
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.0023956803358942125, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.0030242011171139893, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    /home/circleci/.local/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:512: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.003221665278488217, tolerance: 0.0010121
      model = cd_fast.sparse_enet_coordinate_descent(
    sparse-ho finished




Plot results
------------


.. code-block:: default


    p_alphas_grad = np.exp(np.array(monitor_grad.log_alphas)) / alpha_max

    objs_grad = np.array(monitor_grad.objs)

    print('sparse-ho finished')
    print("Time to compute CV for scikit-learn: %.2f" % t_sk)
    print("Time to compute CV for sparse-ho: %.2f" % t_grad_search)

    print('Minimum objective grid-search %.5f' % objs.min())
    print('Minimum objective grad-search %.5f' % objs_grad.min())


    current_palette = sns.color_palette("colorblind")

    fig = plt.figure(figsize=(5, 3))
    plt.semilogx(
        p_alphas, objs, color=current_palette[0])
    plt.semilogx(
        p_alphas, objs, 'bo', label='0-order method (grid-search)',
        color=current_palette[1])
    plt.semilogx(
        p_alphas_grad, objs_grad, 'bX', label='1-st order method',
        color=current_palette[2])
    plt.xlabel(r"$\lambda / \lambda_{\max}$")
    plt.ylabel(
        r"$\|y^{\rm{val}} - X^{\rm{val}} \hat \beta^{(\lambda)} \|^2$")
    plt.tick_params(width=5)
    plt.legend()
    plt.tight_layout()
    plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_held_out_lasso_001.png
    :alt: plot held out lasso
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparse-ho finished
    Time to compute CV for scikit-learn: 12.36
    Time to compute CV for sparse-ho: 20.34
    Minimum objective grid-search 0.21316
    Minimum objective grad-search 0.21211





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  43.389 seconds)


.. _sphx_glr_download_auto_examples_plot_held_out_lasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_held_out_lasso.py <plot_held_out_lasso.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_held_out_lasso.ipynb <plot_held_out_lasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
