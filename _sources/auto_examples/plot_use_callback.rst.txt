
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_use_callback.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_use_callback.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_use_callback.py:


==============================================
Monitor custom metrics along hyperoptimization
==============================================
This example shows how to compute customize metrics using a callback function,
as in scipy.optimize.

.. GENERATED FROM PYTHON SOURCE LINES 8-57

.. code-block:: default


    # Authors: Quentin Bertrand <quentin.bertrand@inria.fr>
    #          Quentin Klopfenstein <quentin.klopfenstein@u-bourgogne.fr>
    #          Mathurin Massias <mathurin.massias@gmail.com>
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn import linear_model
    from sklearn.metrics import mean_squared_error
    from sklearn.model_selection import train_test_split
    from sklearn.datasets import make_regression

    from sparse_ho.models import Lasso
    from sparse_ho.criterion import HeldOutMSE
    from sparse_ho import ImplicitForward
    from sparse_ho.utils import Monitor
    from sparse_ho.ho import grad_search
    from sparse_ho.optimizers import LineSearch

    from libsvmdata.datasets import fetch_libsvm


    print(__doc__)

    # dataset = 'rcv1'
    dataset = 'simu'

    if dataset == 'rcv1':
        X, y = fetch_libsvm('rcv1.binary')
    else:
        X, y = make_regression(
            n_samples=1000, n_features=1000, noise=40, random_state=0)

    # The dataset is split in 2: the data for training and validation: X/y and
    # the unseen data X_test/y_test, use to assess the quality of the model
    X, X_test, y, y_test = train_test_split(X, y, test_size=0.333, random_state=0)

    n_samples = X.shape[0]
    idx_train = np.arange(0, n_samples // 2)
    idx_val = np.arange(n_samples // 2, n_samples)

    alpha_max = np.max(np.abs(X[idx_train, :].T @ y[idx_train])) / len(idx_train)
    alpha0 = alpha_max / 10

    estimator = linear_model.Lasso(
        fit_intercept=False, max_iter=1e5, warm_start=True)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Call back definition

.. GENERATED FROM PYTHON SOURCE LINES 59-68

.. code-block:: default

    objs_test = []


    def callback(val, grad, mask, dense, alpha):
        # The custom quantity is added at each outer iteration:
        # here the prediction MSE on test data
        objs_test.append(mean_squared_error(X_test[:, mask] @ dense, y_test))









.. GENERATED FROM PYTHON SOURCE LINES 69-71

Grad-search with sparse-ho and callback
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 71-80

.. code-block:: default

    model = Lasso(estimator=estimator)
    criterion = HeldOutMSE(idx_train, idx_val)
    algo = ImplicitForward()
    # use Monitor(callback) with your custom callback
    monitor = Monitor(callback=callback)
    optimizer = LineSearch(n_outer=30)

    grad_search(algo, criterion, model, optimizer, X, y, alpha0, monitor)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (1.2432848511536214, 1846.3498842875067, -69.01087353749529)



.. GENERATED FROM PYTHON SOURCE LINES 81-83

Plot results
------------

.. GENERATED FROM PYTHON SOURCE LINES 83-90

.. code-block:: default

    plt.figure(figsize=(5, 3))
    plt.plot(monitor.times, objs_test)
    plt.tick_params(width=5)
    plt.xlabel("Times (s)")
    plt.ylabel(r"$\|y^{\rm{test}} - X^{\rm{test}} \hat \beta^{(\lambda)} \|^2$")
    plt.tight_layout()
    plt.show(block=False)



.. image-sg:: /auto_examples/images/sphx_glr_plot_use_callback_001.png
   :alt: plot use callback
   :srcset: /auto_examples/images/sphx_glr_plot_use_callback_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.410 seconds)


.. _sphx_glr_download_auto_examples_plot_use_callback.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_use_callback.py <plot_use_callback.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_use_callback.ipynb <plot_use_callback.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
